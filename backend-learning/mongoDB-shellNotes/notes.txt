1.How to used Mongo shell
= * open terminal
= * type mongosh

2. To find database
= show dbs

output:
test> show dbs
admin           40.00 KiB
config         108.00 KiB
local           40.00 KiB
nabinDatabase   40.00 KiB
 
                           //*********************************************** CRUD Operation **************************************************// 

                                                                             // C = Create //

3. To used presented database or create new database
// when new database is created we need to add collection on that database for displaying databasename
= use database_name 
- example: use nabinDatabase

output: 
test> use nabinDatabase
switched to db nabinDatabase

4. To create collection and insert the document
// we don't need to add "" on key because it will add in background procee but we need to add on value
=  db.biodata.insertOne({name: "Nabin", age: 24});

output:
{
  acknowledged: true,
  insertedIds:
    ObjectId('66cf5a22914e5efbf72710bc')
}

5. To insertMultiple document
// we need to create array of an BSON to add multiple document
// every document have their unique ids
 = db.test.insertMany([{name: "nabin", age: 24}, {name: "siwan", age: 24}])

 output:
 {
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('66cf5a22914e5efbf72710bc'),
    '1': ObjectId('66cf5a22914e5efbf72710bd')
  }
}

                                                                             // C = Create //


                                                                             // R = Read //

6. To find collection
= show collections

output:
biodata
test

7. To find document or read the document
// if the document present in single line we used db.test.find().pretty()
=  db.test.find()

output: 
[
  { _id: ObjectId('66cf5a22914e5efbf72710bc'), name: 'nabin', age: 24 },
  { _id: ObjectId('66cf5a22914e5efbf72710bd'), name: 'siwan', age: 24 }
]

8. To find current database
= db
output:
recentlyusedDatabase
ex here: nabinDatabase

9. get only specific document by field as a output
// here we write only query in the field not projection
= db.collectio_name.find({name: "field_name"});

output: 
[
  { _id: ObjectId('66cf5a22914e5efbf72710bc'), name: 'nabin', age: 24 
  }
]

10. get only specific field only as an output
// here we write projection after query. name: 1 get name only, if we write name: 0 it will get all field insted name
= db.collectio_name.find({name: "field_name"}, {name: 1});

output:
[ { _id: ObjectId('66cf5a22914e5efbf72710bc'), name: 'nabin' } ]


11. get field without _id in it
= db.collectio_name.find({name: "field_name"}, {_id:0, name: 1});

output:
[ { name: 'nabin' } ]

12.  set the filter to "active:true" and get only the first field with "active:true" value.
// it will deisplay first filter field
= db.collectio_name.find({active: true}).limit(1);

output:
[
  {
    _id: ObjectId('66d01159cfb68cfaf62710bc'),
    name: 'Nabin Poudel',
    age: 24,
    address: 'Rapti-01, Bhaluwang, Dang',
    active: true
  }
]

or we can used another method 
== db.collectio_name.findOne({active:true})

output: 
{
  _id: ObjectId('66d01159cfb68cfaf62710bc'),
  name: 'Nabin Poudel',
  age: 24,
  address: 'Rapti-01, Bhaluwang, Dang',
  active: true
}

13. set the filter to "active:true" and get the second field by skipping first field with "active:true" value.
= db.collectio_name.findOne({active:true}).limit(1).skip(1)

output:
[
  {
    _id: ObjectId('66d01167cfb68cfaf62710bd'),
    name: 'Siwann Poudel',
    age: 24,
    address: 'Rapti-01, Bhaluwang, Dang',
    active: true
  }
]

                                                                             // R = Read //


                                                                             // U = Update //

14. update all value by using same document filed value 
 db.collectio_name.updateMany({filter}, {$set: {update}})
// if there is an same value in filed but update value not present in some document it will create update value in that document.
= db.collectio_name.updateMany({age: 24}, {$set: {active: false}})

before this command the document:
[
  { _id: ObjectId('66cf5a22914e5efbf72710bc'), name: 'nabin', age: 24 },
  { _id: ObjectId('66cf5a22914e5efbf72710bd'), name: 'siwan', age: 24 },
  {
    _id: ObjectId('66d01159cfb68cfaf62710bc'),
    name: 'Nabin Poudel',
    age: 24,
    address: 'Rapti-01, Bhaluwang, Dang',
    active: true
  },
  {
    _id: ObjectId('66d01167cfb68cfaf62710bd'),
    name: 'Siwann Poudel',
    age: 24,
    address: 'Rapti-01, Bhaluwang, Dang',
    active: true
  }
]

after the command OUTPUT:
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 4,
  modifiedCount: 4,
  upsertedCount: 0
}

and the document:
[
  {
    _id: ObjectId('66cf5a22914e5efbf72710bc'),
    name: 'nabin',
    age: 24,
    active: false
  },
  {
    _id: ObjectId('66cf5a22914e5efbf72710bd'),
    name: 'siwan',
    age: 24,
    active: false
  },
  {
    _id: ObjectId('66d01159cfb68cfaf62710bc'),
    name: 'Nabin Poudel',
    age: 24,
    address: 'Rapti-01, Bhaluwang, Dang',
    active: false
  },
  {
    _id: ObjectId('66d01167cfb68cfaf62710bd'),
    name: 'Siwann Poudel',
    age: 24,
    address: 'Rapti-01, Bhaluwang, Dang',
    active: false
  }
]


15. update the specific value of field 
=  db.collection_name.updateOne({name: "siwan poudel"}, {$set: {age: 23}})
// it will update the specific field 

before this command:
[
  {
    _id: ObjectId('66cf5a22914e5efbf72710bc'),
    name: 'nabin',
    age: 24,
    active: false
  },
  {
    _id: ObjectId('66cf5a22914e5efbf72710bd'),
    name: 'siwan',
    age: 24,
    active: false
  },
  {
    _id: ObjectId('66d01159cfb68cfaf62710bc'),
    name: 'Nabin Poudel',
    age: 24,
    address: 'Rapti-01, Bhaluwang, Dang',
    active: false
  },
  {
    _id: ObjectId('66d01167cfb68cfaf62710bd'),
    name: 'Siwann Poudel',
    age: 24,
    address: 'Rapti-01, Bhaluwang, Dang',
    active: false
  }
]

after this command output: 
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}

and the document:
[
  {
    _id: ObjectId('66cf5a22914e5efbf72710bc'),
    name: 'nabin',
    age: 24,
    active: true
  },
  {
    _id: ObjectId('66cf5a22914e5efbf72710bd'),
    name: 'siwan',
    age: 24,
    active: false
  },
  {
    _id: ObjectId('66d01159cfb68cfaf62710bc'),
    name: 'Nabin Poudel',
    age: 24,
    address: 'Rapti-01, Bhaluwang, Dang',
    active: false
  },
  {
    _id: ObjectId('66d01167cfb68cfaf62710bd'),
    name: 'Siwann Poudel',
    age: 24,
    address: 'Rapti-01, Bhaluwang, Dang',
    active: false
  }
]

                                                                             // U = Update //


                                                                             // D = Delete //

16. delete the specific document
= db.collectio_name.deleteMany({active false})

before command:
[
  {
    _id: ObjectId('66cf5a22914e5efbf72710bc'),
    name: 'nabin',
    age: 24,
    active: true
  },
  {
    _id: ObjectId('66cf5a22914e5efbf72710bd'),
    name: 'siwan',
    age: 24,
    active: false
  },
  {
    _id: ObjectId('66d01159cfb68cfaf62710bc'),
    name: 'Nabin Poudel',
    age: 24,
    address: 'Rapti-01, Bhaluwang, Dang',
    active: false
  },
  {
    _id: ObjectId('66d01167cfb68cfaf62710bd'),
    name: 'Siwann Poudel',
    age: 24,
    address: 'Rapti-01, Bhaluwang, Dang',
    active: false
  }
]

after command OUTPUT:
{ acknowledged: true, deletedCount: 1 }

and document: 
[
  {
    _id: ObjectId('66cf5a22914e5efbf72710bd'),
    name: 'siwan',
    age: 24,
    active: false
  },
  {
    _id: ObjectId('66d01159cfb68cfaf62710bc'),
    name: 'Nabin Poudel',
    age: 24,
    address: 'Rapti-01, Bhaluwang, Dang',
    active: false
  },
  {
    _id: ObjectId('66d01167cfb68cfaf62710bd'),
    name: 'Siwann Poudel',
    age: 24,
    address: 'Rapti-01, Bhaluwang, Dang',
    active: false
  }
]

17. delete all the document
// this command will delete all the documet present in a collection
= db.collectio_name.deleteMany({})

output: 
{ acknowledged: true, deletedCount: 3 }



                                                                             // D = Delete //

                           //*********************************************** CRUD Operation **************************************************// 